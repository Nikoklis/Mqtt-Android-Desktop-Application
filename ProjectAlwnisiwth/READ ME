Νικόλαος Καραδήμας 1115201300061
Ευστράτιος Συντώσης 1115201200175
Έλενα Παναγιώτα Ζησιμάτου 1115201300263

1o Part:

Αρχεια κωδικα:
    Android App:
        Υπαρχουν 2 αρχεια .java μεσα στο project. Το MainActivity.java περιεχει τον κωδικα της κυριας Activity και και το δευτερο αρχειο ειναι βοηθητικο και 
        περιεχει τον κωδικα μιας Subscriber class που μας βοηθαει στην υλοποιηση της συνδεσης με το MQTT.
    Java App:
        Υπαρχει 1 αρχειο .java στο οποιο γινεται συνδεση με τον broker που τρεχει τοπικα στο ιδιο μηχανημα , ενω στη συνεχεια εχουμε μια loop μεσω της οποιας
        δινουμε εντολες για να αποσταλλουν στον broker.

Αρχεια XML (σε Android App): 
    Υπαρχει 1 αρχειο XML για την main activity στο οποιο εχουμε 2 κουμπια χειροκινητης ενεργοποιησης/απενεργοποιησης των εντολων , ενα TextView που μας δειχνει
    την εντολη που λαμβανουμε απο την Java εφαρμογη (και βοηθητικα μηνυματα για τη συνδεση στον broker) και ενα menu με 2 επιλογες "Settings" και "Exit"
    . Πατωντας την εντολη "Settings" ο χρηστης συνδεεται με τον broker που ειναι εγκατεστημενος στon υπολογιστη. Με το κουμπι "Exit" ο χρηστης μπορει να φυγει
    απο την εφαρμογη. Εχει υλοποιηθει επισης λειτουργια για την εξοδο του χρηστη απο την εφαρμογη πατωντας το "back button" του Android . Μολις ο χρηστης πατησει
    το "back button" βλεπει ενα "Alert box" στην οθονη του που τον ρωταει για επιβεβαιωση της εξοδου του.
    

Τα 2 κουμπια χειροκινητης απενεργοποιησης των εντολων λειτουργουν και για τις εντολες που δεχεται ο χρηστης απο την Java App αλλα και εαν ο χρηστης
επιλεξει να πατησει καποιο κουμπι τοτε ενεργοποιει/απενεργοποιει ηχο/εικονα.


2o Part:

Αρχεία Κώδικα:
    Android App:
        Έχουμε επιπλέον σε αυτό το part υλοποιήσει μια δεύτερη Activity , μέσω της οποίας λαμβάνουμε δεδομένα από το χρήστη (IP , Port , Frequency) . Συνεπώς υπάρχουν 
        1 αρχείο Options.java με τον κώδικα java της Activity και ένα ακόμα αρχείο XML για την υλοποίηση του UI της συγκεκριμένης Activity.
        
        Ακόμα υπάρχει 1 αρχείο InternetChecker.java μέσα στο οποίο γίνεται ο έλεγχος για την σύνδεση στο internet σε background thread.
        
        Εξακολουθούν να υπάρχουν τα αρχεία του πρώτου part με αρκετές τροποποιήσεις.
        
    Java App:
        Αρχικά έχουμε τα αρχεια που μας δώθηκαν από το Eclass τα οποία και δεν τροποποιήθηκαν. 
        Έπειτα έχουμε 2 extra αρχεια FileInfo.java και Sender.java . Στο πρώτο υλοποιείται όλο το διάβασμα από τα CSV αρχεία ++ όλη η διαδικασία υπολογισμού του feattureVector 
        του κάθε αρχείου. (υλοποίηση extra class για την αποθήκευση δεδομένων των αρχείων) Στο δευτερο αρχείο έχουμε την υλοποιήση μιας κλάσσης η οποία αναλαμβάνει να στέλνει τα δεδομένα στην 
        που υπάρχουν σε μια blocking Queue που υπάρχει στο πρόγραμμα μας (και λειτουργεί ως buffer) στην Android App . Επίσης αυτή η class ενημερώνεται απο το Android για τη
        συχνότητα αποστολής εντολών μέσω του MQTT.
        Υπάρχει ακόμα ένα αρχείο kNN στο οποίο έχει γίνει όλη η υλοποίηση του weighted Knn όπως μας ζητήθηκε.
        
Επεξήση ροής προγράμματος :
    Αρχικά συνδέουμε το Android App μας στον broker , που λειτουργεί στον υπολογιστή μας(Μέσα στην εφαρμογή android υπαρχουν μηνύματα που βοηθάνε το χρήστη στη σύνδεση
    του με τον broker). Πηγαίνοντας στο menu της εφαρμογής (πάνω δεξιά) και πατώντας την επιλογή "options" μεταφερόμαστε σε σελίδα του App που μας ζητούνται Ip,Port ,Frequency
    για τη σύνδεση μας σε κάποιο broker . Πατώντας το κουμπί "Send" που ύπαρχει στην σελίδα γίνεται η σύνδεση και μεταφερόμαστε στην αρχική σελίδα . Στην συνέχεια πηγαίνουμε 
    στην Java App μας και την τρέχουμε. Η Java App ξεκινάει μαντεύοντας με τον kNN της κλάσσης των αρχείων (αφού πρώτα προηγηθεί επεξεργασία με τη χρήση των κλάσσεων + parsing όπως
    προαναφέρθηκε) και τοποθετώντας είτε την εντολή "EyesOpened" είτε την εντολή "EyesClosed" σε μία blockingQueue η οποία υλοποιεί τον buffer των εντολών που είναι έτοιμες να
    Android App . Η blockingQueue είναι δομή που μας εγγυάται τον συγχρονισμό μεταξύ των 2 threads που διαχειρίζονται την δομή . Τα 2 threads που υπάρχουν αναλαμβάνουν το ένα 
    (main thread) να γεμίζει την ουρά (producer thread) και το άλλο (sender thread) να παίρνει εντολές από την ουρά και να τις στέλνει στην Android App (Consumer thread).Ο sender thread 
    στέλνει πάντα με βάση τη συχνότητα που δώσαμε στο Android App μας και πάντα "ακούει" και αυτός τον broker για τυχόν ενημερώσεις στη συχνότητα.
    
    Extra Notes :
        Και τα 2 προγράμματα είναι ταυτόχρονα και Publisher και Subscriber στον ίδιο broker. Το Android για να στέλνει τη συχνότητα (publisher) αλλά και για να λαμβάνει
        τις εντολές προς εκτέλεση (subscriber) , ενώ η Java App είναι publisher για να στέλνει τις εντολές και subscriber για να λαμβάνει τη συχνότητα. 
        Όταν το android δέχεται εντολή "EyesOpened" από την Java τότε εκτελεί τις λειτουργίες "Play music for 5 seconds" και "Open torch for 5 seconds". Η τιμή 5 είναι 
        απλά μια default τιμή. Αν δεχθεί συνεχόμενες εντολές "EyesOpened" ενώ είναι ήδη ανοιχτά φακός/μουσικη εμφανίζει κατάλληλο μήνυμα στον χρήστη και δεν εκτελέι τις
        συγκεκριμένες εντολές . Για τις συνεχόμενες "EyesClosed" δεν εκτελείται και πάλι τίποτα. 
        Σημείωση : ο χρήστης μπορεί ακόμα να ανοίξει τον φακό / μουσική από τα κουμπιά που υλοποιήθηκαν στο part 1 . Σε τέτοια περίπτωση αν μας έρθει εντολή "EyesOpened"
        δεν την λαμβάνουμε υπόψη και αν έρθει "EyesClosed" εκτελείται κανονικά.
        
        
Η εφαρμογη δοκιμαστηκε σε Emulator PIXEL XL API 26 αλλα και σε Motorolla MotoG4 . 

Ολα τα αρχεια εχουν μεσα σχολια για την επεξηγηση των συναρτησεων/μεταβλητων
